######################################## General Evolutionary Configurations ########################################
fitness = Feynman.I620A
# random seed
seed = 101
# number of evolutionary runs
generations = 100
# Population size
population_size = 100
# Tournament size for the tournament selection scheme
tournament_size = 5
# chance for performing structural mutation 0.2 dictates a 20% mutation rate
structural_mutation_rate = 0.30
# chance for LGP programs to modify
lgp_mutation_rate = 0.60
# Increased chance of mutations on RetCons
return_mutation_rate_increase_handle = 0.20
# Crossover rate. 1 means 100%
crossover_rate = 1
# The number of elites to be preserved in each generation
elitism = 1
# Cost formula, you have access to the following variables: distance, max_distance, length, max_length and return_val
# cost_formula = math.log(1+distance) + math.log(1+abs(return_val))
cost_formula = math.log(1+distance)
# Save annotations or not
save_annotation = False
# Determine the spatial topology of the system. Options: circle, ring, line
topology = circle
# Output ratio: The ratio of selecting program nodes as output nodes. 0.2 = 20% chance. This is only for the case that
# there are continuous outputs and not discrete outputs. Put "single" (without the quotations) if you want to have one
# designated output per model. Put "none" if you prefer not to have output programs, meaning that all the programs will
# execute until the last one
output_ratio = 0.2
######################################## Function/Input Set Configurations #########################################
# Collections: Use name of the class file as the package name. Each class used should be provided as the value
# separated by a comma. e.g: loop_class_filename = OP_FOR, OP_WHILE, OP_DO_WHILE
basemath = OP_SUM, OP_DIV, OP_MULT, OP_MINUS, OP_EXP, OP_SQRT # INDIVIDUAL OPs
if = OP_IF
end_program = OP_END
assign = OP_ASSIGN
ant = LEFT, RIGHT, MOVE, IF_SENSE
# conditionals are used the same way as inputs. an alternative method would be to introduce them in the inputs section.
# None is no conditional
conditionals = ==, >, <
# Constants: Only numerical values are supported for the time being (might never change)
constants = 1, 2, 3, 4, 5, 6, 7, 8, 9
# Operator set separated by comma
operators = basemath, assign
# Registers: number of additional internal registers.
registers = 3

######################################## SGP Configurations #########################################
# Minimum and maximum number of programs for initialization
init_size_min = 1
init_size_max = 10
# Maximum number of programs per model
size_max = 100

# Enable/disable loops
enable_loops = False
# Enable/disable self-loops. This won't work if loops are disabled.
self_loop = False
# Cost penalty for revisiting a node
revisit_penalty = 0.1
# Maximum evaluation time dedicated to models. Time is in milliseconds
max_evaluation_time = 200

######################################## LGP Configurations #########################################
# Whether or not RetCons should be used. This also indicates the number of conditions separated by or/and
conditional_return = 0
# The number of return statements that will be generated
conditional_return_depth = 1
# Minimum and maximum number of statements for initialization of the LGP programs
init_lgp_size_min = 1
init_lgp_size_max = 5
# Maximum allowed number of statements for the LGP programs
lgp_size_max = 10

######################################## Spatial Configurations #########################################
# Maximum step size that LGP programs can take to relocate
# random_walk_step_size = 10 # this is temporarily disabled and is replaced with random position assignment

# 2D circle radius size. Bounds program locations in a radius
init_radius = 150

######################################## SGP System Configurations #########################################
# System modules. This enables to swap a specific module of the SGP system and to add/develop new modules
individual = BaseIndividual
population = BasePopulation
interpreter = BaseInterpreter
evolver = BaseEvolver
programs = LGP

# Path to the output files
best_program = Output/best.py
best_object = Output/best.sgp
pop_save_path = Output/Population/
evo_file = Output/evo.csv